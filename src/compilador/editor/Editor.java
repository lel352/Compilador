/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package compilador.editor;

import compilador.analisadorlexico.AnalisadorLexico;
import compilador.analisadorlexico.Tokens;
import compilador.analisadorsintatico.AnalisadorSintatico;
import java.io.File;
import javax.swing.JFileChooser;
import compliador.comandos.Comandos;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Leandro, Cassio
 *  
 * frame principal do projeto
 * 
 */
public class Editor extends javax.swing.JFrame {

    /**
     * Creates new form Editor
     */
    private String path = "";
    private String nomeFile = "";
    private Comandos comandos = new Comandos();
    private boolean modific = false;
    private boolean novo = true;
    
    private AnalisadorLexicoJanela analisadorLexicoJanela = null;

    public Editor() {
        initComponents();
    }

    private void novoTextArea() {
        int posi = path.indexOf(nomeFile);
        path = path.substring(0, posi);
        novo = true;
        jTextAreaEditor.setText(null);
    }

    private void limparListaErro() {
        jListErros.removeAll();
        jListErros.setModel(new DefaultListModel());  
    }

    private void atualizarListaErro(String erro) {
        DefaultListModel listmodel = new DefaultListModel();
        listmodel.addElement(erro);
        jListErros.setModel(listmodel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaEditor = new javax.swing.JTextArea();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListErros = new javax.swing.JList();
        jMenu = new javax.swing.JMenuBar();
        jsubArquivo = new javax.swing.JMenu();
        jMenuItemNovo = new javax.swing.JMenuItem();
        jMenuItemAbrir = new javax.swing.JMenuItem();
        jMenuItemSalvar = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemSair = new javax.swing.JMenuItem();
        jMenuExeculta = new javax.swing.JMenu();
        jMenuItemExecuLexico = new javax.swing.JMenuItem();
        jMenuItemExecuSinta = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextAreaEditor.setColumns(20);
        jTextAreaEditor.setRows(5);
        jTextAreaEditor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextAreaEditorKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTextAreaEditor);

        jScrollPane3.setViewportView(jListErros);

        jTabbedPane2.addTab("Erro", jScrollPane3);

        jsubArquivo.setText("Arquivo");

        jMenuItemNovo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemNovo.setText("Novo");
        jMenuItemNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNovoActionPerformed(evt);
            }
        });
        jsubArquivo.add(jMenuItemNovo);

        jMenuItemAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemAbrir.setText("Abrir");
        jMenuItemAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAbrirActionPerformed(evt);
            }
        });
        jsubArquivo.add(jMenuItemAbrir);

        jMenuItemSalvar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemSalvar.setText("Salvar");
        jMenuItemSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSalvarActionPerformed(evt);
            }
        });
        jsubArquivo.add(jMenuItemSalvar);
        jsubArquivo.add(jSeparator1);

        jMenuItemSair.setText("Sair");
        jMenuItemSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSairActionPerformed(evt);
            }
        });
        jsubArquivo.add(jMenuItemSair);

        jMenu.add(jsubArquivo);

        jMenuExeculta.setText("Executar");

        jMenuItemExecuLexico.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F10, 0));
        jMenuItemExecuLexico.setText("Analisador Léxico ");
        jMenuItemExecuLexico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExecuLexicoActionPerformed(evt);
            }
        });
        jMenuExeculta.add(jMenuItemExecuLexico);

        jMenuItemExecuSinta.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F11, 0));
        jMenuItemExecuSinta.setText("Analisador Sintático");
        jMenuItemExecuSinta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExecuSintaActionPerformed(evt);
            }
        });
        jMenuExeculta.add(jMenuItemExecuSinta);

        jMenu.add(jMenuExeculta);

        setJMenuBar(jMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 959, Short.MAX_VALUE)
            .addComponent(jTabbedPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSalvarActionPerformed
        // TODO add your handling code here:
        if (jTextAreaEditor.getText().trim().length() > 0) {
            if (novo == true){
                JFileChooser fc = new JFileChooser(path);
                //Exibe o diálogo. Deve ser passado por parâmetro o JFrame de origem.

                fc.showSaveDialog(Editor.this);
                //Captura o objeto File que representa o arquivo selecionado.
                File selFile = fc.getSelectedFile();
                path = selFile.getAbsolutePath()+".acdc";
                nomeFile = selFile.getName()+".acdc";
                
                comandos.gravarArquivo(selFile.getAbsolutePath() + ".acdc", jTextAreaEditor.getText());
                novo = false;
            } else if (comandos.verifArquivo(path)) {
                comandos.gravarArquivo(path, jTextAreaEditor.getText());
                
            }
            else {
                JOptionPane.showMessageDialog(null,"Erro ao salvar o arquivo !!!" );
            }
        } else {
            novoTextArea();
        }
        modific = false;
    }//GEN-LAST:event_jMenuItemSalvarActionPerformed

    private void jMenuItemSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSairActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItemSairActionPerformed

    private void jMenuItemAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAbrirActionPerformed
        // TODO add your handling code here:
        if (((path.equals("")) && (!jTextAreaEditor.getText().trim().equals(""))) || (modific == true)) {
            int result = JOptionPane.showConfirmDialog(null, "Arquivo não foi salvo! \n Deseja Abrir um documento sem salvar", "Aviso", JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.YES_OPTION) {
                JFileChooser fc = new JFileChooser(path);
                fc.addChoosableFileFilter(new FileNameExtensionFilter("(*.acdc)", "acdc"));
                fc.setAcceptAllFileFilterUsed(true);
                fc.setMultiSelectionEnabled(false);

                //Exibe o diálogo. Deve ser passado por parâmetro o JFrame de origem.
                fc.showOpenDialog(Editor.this);
                //Captura o objeto File que representa o arquivo selecionado.
                File selFile = fc.getSelectedFile();
                path = selFile.getAbsolutePath();
                nomeFile = selFile.getName();
                String dados = comandos.lerArquivo(selFile.getAbsolutePath());
                jTextAreaEditor.setText(dados);
                novo = false;
            }
        } else {
            JFileChooser fc = new JFileChooser(path);
            fc.addChoosableFileFilter(new FileNameExtensionFilter("(*.acdc)", "acdc"));
            fc.setAcceptAllFileFilterUsed(true);
            fc.setMultiSelectionEnabled(false);

            //Exibe o diálogo. Deve ser passado por parâmetro o JFrame de origem.
            fc.showOpenDialog(Editor.this);
            //Captura o objeto File que representa o arquivo selecionado.
            File selFile = fc.getSelectedFile();
            path = selFile.getAbsolutePath();
            nomeFile = selFile.getName();
            String dados = comandos.lerArquivo(selFile.getAbsolutePath());
            jTextAreaEditor.setText(dados);
            novo = false;
        }

    }//GEN-LAST:event_jMenuItemAbrirActionPerformed

    private void jMenuItemNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNovoActionPerformed
        // TODO add your handling code here:

        if (((path.equals("")) && (!("").equals(jTextAreaEditor.getText().trim()))) || (modific == true)) {

            int result = JOptionPane.showConfirmDialog(null, "Arquivo não foi salvo! \n Deseja Criar um novo documento sem salvar", "Aviso", JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.YES_OPTION) {
                novoTextArea();
            }
        } else {
            novoTextArea();
        }
    }//GEN-LAST:event_jMenuItemNovoActionPerformed

    private void jMenuItemExecuLexicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExecuLexicoActionPerformed
        // TODO add your handling code here:
        if (!(jTextAreaEditor.getText().trim()).equals("")) {
            limparListaErro();
            AnalisadorLexico analisador = new AnalisadorLexico();
            if (analisadorLexicoJanela == null) {
                analisadorLexicoJanela = new AnalisadorLexicoJanela();
            }
            List<Tokens> tokens = new ArrayList<Tokens>();
            tokens = analisador.lerTexto(jTextAreaEditor.getText());
            if (tokens.size() > 0) {
                analisadorLexicoJanela.carregartabela(tokens);
                analisadorLexicoJanela.setVisible(true);
            }    
            //  analisadorLexico.setFocusable(true);
            analisadorLexicoJanela.setDefaultCloseOperation(HIDE_ON_CLOSE);

            atualizarListaErro(analisador.returnerro());
        }
    }//GEN-LAST:event_jMenuItemExecuLexicoActionPerformed

    private void jTextAreaEditorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextAreaEditorKeyPressed
        // TODO add your handling code here:
        modific = true;
    }//GEN-LAST:event_jTextAreaEditorKeyPressed

    private void jMenuItemExecuSintaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExecuSintaActionPerformed
        // TODO add your handling code here:
        limparListaErro();
         if (!(jTextAreaEditor.getText().trim()).equals("")) {
            AnalisadorLexico analisador = new AnalisadorLexico();
            List<Tokens> tokens = new ArrayList<Tokens>();
            tokens = analisador.lerTexto(jTextAreaEditor.getText());
            if (tokens.size() > 0) {
                AnalisadorSintatico analisadorSintatico = new AnalisadorSintatico();
                int resu = analisadorSintatico.Analisar(tokens);
                switch(resu){
                    case 0: JOptionPane.showMessageDialog(null, "Analise efetuada! \nSem erros!");
                        break;
                    case 1: JOptionPane.showMessageDialog(null, "Analise incompleta! ");
                        break; 
                    case 2: atualizarListaErro(analisadorSintatico.returnErro()); 
                        break;
                    default:  JOptionPane.showMessageDialog(null, "Erro no retorno da analise!");
                }
            } 
            else{
                atualizarListaErro("Sem tokens!!!"); 
            }
            
        }
        
    }//GEN-LAST:event_jMenuItemExecuSintaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Editor().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame jFrame1;
    private javax.swing.JList jList1;
    private javax.swing.JList jListErros;
    private javax.swing.JMenuBar jMenu;
    private javax.swing.JMenu jMenuExeculta;
    private javax.swing.JMenuItem jMenuItemAbrir;
    private javax.swing.JMenuItem jMenuItemExecuLexico;
    private javax.swing.JMenuItem jMenuItemExecuSinta;
    private javax.swing.JMenuItem jMenuItemNovo;
    private javax.swing.JMenuItem jMenuItemSair;
    private javax.swing.JMenuItem jMenuItemSalvar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextArea jTextAreaEditor;
    private javax.swing.JMenu jsubArquivo;
    // End of variables declaration//GEN-END:variables
}
